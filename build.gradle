buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
		maven {
			url("https://plugins.gradle.org/m2/")
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.moowork.gradle:gradle-node-plugin:1.0.0"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: "com.moowork.node"

jar {
	baseName = 'volunteer'
	version = '0.0.1-SNAPSHOT'
}

war {
	it.dependsOn 'copyjs'
}

sourceCompatibility = 1.8

repositories {
	maven {
		url("https://plugins.gradle.org/m2/")
	}
}

springBoot {
	executable = true
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile('org.springframework.boot:spring-boot-starter-validation')
	compile('org.apache.tomcat.embed:tomcat-embed-el')
	compile('commons-beanutils:commons-beanutils')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.security.oauth:spring-security-oauth2')
	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')

	compile('org.mnode.ical4j:ical4j:1.0.5')
	compile('net.sf.biweekly:biweekly:0.6.1')

	compile('com.esotericsoftware.yamlbeans:yamlbeans:1.06')

	runtime('mysql:mysql-connector-java')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.hsqldb:hsqldb')
}


task copyjs(type:Sync) {

	group 'help'
	description 'updates JS libraries from package.json and syncs with components folder'

	def nodeExt = project.extensions.findByName("node")

	from 'node_modules/'
	into "src/main/webapp/components"
	include '**/*.min.js'
	include '**/jquery.dataTables.js'
	eachFile {
		details -> details.setRelativePath new RelativePath(true, details.name)
	}

	includeEmptyDirs false
	dependsOn 'copyckeditor'

}

task copyckeditor(type:Sync) {
	group 'help'
	description 'update ckeditor'

	from 'node_modules/ckeditor'
	into 'src/main/webapp/ckeditor'

	dependsOn 'copyfonts'
}


task copyfonts(type:Sync) {

	group 'other'

	def nodeExt = project.extensions.findByName("node")

	nodeExt.with {
		version = '0.12.2'
		npmVersion = '2.7.5'
		download = true
	}

	from 'node_modules/bootstrap-sass/assets/fonts'
	into "src/main/webapp/fonts"

	includeEmptyDirs false
	dependsOn 'npmInstall'

}

task generateDbPuml(type:JavaExec) {
	group 'documentation'

	main = "ru.ifmo.neerc.dev.PumlGenerator"
	classpath = sourceSets.main.runtimeClasspath
	//noinspection GroovyAssignabilityCheck
	args "database"
}

task generateDataSql(type:JavaExec) {
	group 'verification'

	main = "ru.ifmo.neerc.dev.DataGenerator"
	classpath = sourceSets.main.runtimeClasspath

	args 'data.sql'
}
